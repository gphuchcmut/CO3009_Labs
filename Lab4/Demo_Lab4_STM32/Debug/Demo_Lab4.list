
Demo_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c70  08002c70  00003c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c94  08002c94  00004080  2**0
                  CONTENTS
  4 .ARM          00000000  08002c94  08002c94  00004080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c94  08002c94  00004080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08002c9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000080  08002d1c  00004080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002d1c  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e01  00000000  00000000  000040a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb5  00000000  00000000  0000ceaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0000ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000814  00000000  00000000  0000f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001703d  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca6e  00000000  00000000  00027049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008271e  00000000  00000000  00033ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b61d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  000b6218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b8bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c58 	.word	0x08002c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002c58 	.word	0x08002c58

0800014c <isButtonNOPressed>:
int keyReg2[NO_BUTTONS] = {RELEASED, RELEASED, RELEASED};
int keyReg3[NO_BUTTONS] = {RELEASED, RELEASED, RELEASED};

int TimeOutForKeyPress;

int isButtonNOPressed(int NO){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonFlag[NO] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonNOPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonNOPressed+0x22>
		buttonFlag[NO] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonNOPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonNOPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000009c 	.word	0x2000009c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	@ (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000009c 	.word	0x2000009c

080001a0 <button_detector>:

GPIO_PinState button_detector(int index){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	switch (index) {
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d017      	beq.n	80001de <button_detector+0x3e>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc1b      	bgt.n	80001ec <button_detector+0x4c>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <button_detector+0x22>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d007      	beq.n	80001d0 <button_detector+0x30>
 80001c0:	e014      	b.n	80001ec <button_detector+0x4c>
		case 0:
			return HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin); //Change Mode
 80001c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001c6:	480c      	ldr	r0, [pc, #48]	@ (80001f8 <button_detector+0x58>)
 80001c8:	f001 fd18 	bl	8001bfc <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	e00e      	b.n	80001ee <button_detector+0x4e>
			break;
		case 1:
			return HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin); //Change Time
 80001d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <button_detector+0x58>)
 80001d6:	f001 fd11 	bl	8001bfc <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	e007      	b.n	80001ee <button_detector+0x4e>
			break;
		case 2:
			return HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin); //Set Time
 80001de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e2:	4805      	ldr	r0, [pc, #20]	@ (80001f8 <button_detector+0x58>)
 80001e4:	f001 fd0a 	bl	8001bfc <HAL_GPIO_ReadPin>
 80001e8:	4603      	mov	r3, r0
 80001ea:	e000      	b.n	80001ee <button_detector+0x4e>
			break;
		default:
			return RELEASED;
 80001ec:	2300      	movs	r3, #0
			break;
	}
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800

080001fc <buttonReading>:

void buttonReading(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e05c      	b.n	80002c2 <buttonReading+0xc6>
		keyReg0[i] = keyReg1[i];
 8000208:	4a32      	ldr	r2, [pc, #200]	@ (80002d4 <buttonReading+0xd8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4931      	ldr	r1, [pc, #196]	@ (80002d8 <buttonReading+0xdc>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 8000218:	4a30      	ldr	r2, [pc, #192]	@ (80002dc <buttonReading+0xe0>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492c      	ldr	r1, [pc, #176]	@ (80002d4 <buttonReading+0xd8>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg2[i] = button_detector(i);
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffb9 	bl	80001a0 <button_detector>
 800022e:	4603      	mov	r3, r0
 8000230:	4619      	mov	r1, r3
 8000232:	4a2a      	ldr	r2, [pc, #168]	@ (80002dc <buttonReading+0xe0>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((keyReg1[i] == keyReg0[i]) && (keyReg1[i] == keyReg2[i])){
 800023a:	4a26      	ldr	r2, [pc, #152]	@ (80002d4 <buttonReading+0xd8>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000242:	4925      	ldr	r1, [pc, #148]	@ (80002d8 <buttonReading+0xdc>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024a:	429a      	cmp	r2, r3
 800024c:	d136      	bne.n	80002bc <buttonReading+0xc0>
 800024e:	4a21      	ldr	r2, [pc, #132]	@ (80002d4 <buttonReading+0xd8>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000256:	4921      	ldr	r1, [pc, #132]	@ (80002dc <buttonReading+0xe0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025e:	429a      	cmp	r2, r3
 8000260:	d12c      	bne.n	80002bc <buttonReading+0xc0>
			if (keyReg2[i] != keyReg3[i]){
 8000262:	4a1e      	ldr	r2, [pc, #120]	@ (80002dc <buttonReading+0xe0>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026a:	491d      	ldr	r1, [pc, #116]	@ (80002e0 <buttonReading+0xe4>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000272:	429a      	cmp	r2, r3
 8000274:	d014      	beq.n	80002a0 <buttonReading+0xa4>
				keyReg3[i] = keyReg2[i];
 8000276:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <buttonReading+0xe0>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027e:	4918      	ldr	r1, [pc, #96]	@ (80002e0 <buttonReading+0xe4>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg3[i] == PRESSED){
 8000286:	4a16      	ldr	r2, [pc, #88]	@ (80002e0 <buttonReading+0xe4>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d114      	bne.n	80002bc <buttonReading+0xc0>
					TimeOutForKeyPress = 100;
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <buttonReading+0xe8>)
 8000294:	2264      	movs	r2, #100	@ 0x64
 8000296:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f7ff ff71 	bl	8000180 <subKeyProcess>
 800029e:	e00d      	b.n	80002bc <buttonReading+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80002a0:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <buttonReading+0xe8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	4a0f      	ldr	r2, [pc, #60]	@ (80002e4 <buttonReading+0xe8>)
 80002a8:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0) {
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <buttonReading+0xe8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d104      	bne.n	80002bc <buttonReading+0xc0>
					keyReg3[i] = RELEASED;
 80002b2:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <buttonReading+0xe4>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2100      	movs	r1, #0
 80002b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	dd9f      	ble.n	8000208 <buttonReading+0xc>
				}
			}
		}
	}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200000b4 	.word	0x200000b4
 80002d8:	200000a8 	.word	0x200000a8
 80002dc:	200000c0 	.word	0x200000c0
 80002e0:	200000cc 	.word	0x200000cc
 80002e4:	200000d8 	.word	0x200000d8

080002e8 <fsm_run>:
int green_Draft = 20;

int count_X;
int count_Y;

void fsm_run(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	switch(status){
 80002ec:	4b20      	ldr	r3, [pc, #128]	@ (8000370 <fsm_run+0x88>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d014      	beq.n	8000322 <fsm_run+0x3a>
 80002f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002fc:	da35      	bge.n	800036a <fsm_run+0x82>
 80002fe:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 8000302:	d029      	beq.n	8000358 <fsm_run+0x70>
 8000304:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 8000308:	dc2f      	bgt.n	800036a <fsm_run+0x82>
 800030a:	f240 124d 	movw	r2, #333	@ 0x14d
 800030e:	4293      	cmp	r3, r2
 8000310:	d019      	beq.n	8000346 <fsm_run+0x5e>
 8000312:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8000316:	da28      	bge.n	800036a <fsm_run+0x82>
 8000318:	2b6f      	cmp	r3, #111	@ 0x6f
 800031a:	d006      	beq.n	800032a <fsm_run+0x42>
 800031c:	2bde      	cmp	r3, #222	@ 0xde
 800031e:	d009      	beq.n	8000334 <fsm_run+0x4c>
			mode_button_scan();			//SW0 Scan
			increase_button_scan();		//SW1 Scan
			set_button_scan();			//SW2 Scan
			break;
		default:
			break;
 8000320:	e023      	b.n	800036a <fsm_run+0x82>
			status = MODE1;
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <fsm_run+0x88>)
 8000324:	226f      	movs	r2, #111	@ 0x6f
 8000326:	601a      	str	r2, [r3, #0]
			break;
 8000328:	e020      	b.n	800036c <fsm_run+0x84>
			fsm_traffic_light();		//Normal Mode
 800032a:	f000 f823 	bl	8000374 <fsm_traffic_light>
			mode_button_scan(); 		//SW0 Scan
 800032e:	f000 fa2b 	bl	8000788 <mode_button_scan>
			break;
 8000332:	e01b      	b.n	800036c <fsm_run+0x84>
			fsm_led_blink();
 8000334:	f000 fb22 	bl	800097c <fsm_led_blink>
			mode_button_scan(); 		//SW0 Scan
 8000338:	f000 fa26 	bl	8000788 <mode_button_scan>
			increase_button_scan(); 	//SW1 Scan
 800033c:	f000 fa82 	bl	8000844 <increase_button_scan>
			set_button_scan();			//SW2 Scan
 8000340:	f000 fad0 	bl	80008e4 <set_button_scan>
			break;
 8000344:	e012      	b.n	800036c <fsm_run+0x84>
			fsm_led_blink();
 8000346:	f000 fb19 	bl	800097c <fsm_led_blink>
			mode_button_scan();			//SW0 Scan
 800034a:	f000 fa1d 	bl	8000788 <mode_button_scan>
			increase_button_scan();		//SW1 Scan
 800034e:	f000 fa79 	bl	8000844 <increase_button_scan>
			set_button_scan();			//SW2 Scan
 8000352:	f000 fac7 	bl	80008e4 <set_button_scan>
			break;
 8000356:	e009      	b.n	800036c <fsm_run+0x84>
			fsm_led_blink();
 8000358:	f000 fb10 	bl	800097c <fsm_led_blink>
			mode_button_scan();			//SW0 Scan
 800035c:	f000 fa14 	bl	8000788 <mode_button_scan>
			increase_button_scan();		//SW1 Scan
 8000360:	f000 fa70 	bl	8000844 <increase_button_scan>
			set_button_scan();			//SW2 Scan
 8000364:	f000 fabe 	bl	80008e4 <set_button_scan>
			break;
 8000368:	e000      	b.n	800036c <fsm_run+0x84>
			break;
 800036a:	bf00      	nop
	}
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000000 	.word	0x20000000

08000374 <fsm_traffic_light>:

void fsm_traffic_light(){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	//Status X Case
	switch(status_X){
 8000378:	4bb2      	ldr	r3, [pc, #712]	@ (8000644 <fsm_traffic_light+0x2d0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000380:	4293      	cmp	r3, r2
 8000382:	d00e      	beq.n	80003a2 <fsm_traffic_light+0x2e>
 8000384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000388:	f280 80e4 	bge.w	8000554 <fsm_traffic_light+0x1e0>
 800038c:	2b21      	cmp	r3, #33	@ 0x21
 800038e:	f000 80a2 	beq.w	80004d6 <fsm_traffic_light+0x162>
 8000392:	2b21      	cmp	r3, #33	@ 0x21
 8000394:	f300 80de 	bgt.w	8000554 <fsm_traffic_light+0x1e0>
 8000398:	2b0b      	cmp	r3, #11
 800039a:	d01d      	beq.n	80003d8 <fsm_traffic_light+0x64>
 800039c:	2b16      	cmp	r3, #22
 800039e:	d05b      	beq.n	8000458 <fsm_traffic_light+0xe4>
				setTimerNO(timer_countX, 1000);
				count_X--;
			}
			break;
		default:
			break;
 80003a0:	e0d8      	b.n	8000554 <fsm_traffic_light+0x1e0>
			status_X = RED;
 80003a2:	4ba8      	ldr	r3, [pc, #672]	@ (8000644 <fsm_traffic_light+0x2d0>)
 80003a4:	220b      	movs	r2, #11
 80003a6:	601a      	str	r2, [r3, #0]
			count_X = red_Value;
 80003a8:	4ba7      	ldr	r3, [pc, #668]	@ (8000648 <fsm_traffic_light+0x2d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4aa7      	ldr	r2, [pc, #668]	@ (800064c <fsm_traffic_light+0x2d8>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimerNO(timerX_LED, red_Value * 1000); //25000ms = 25s
 80003b0:	4ba5      	ldr	r3, [pc, #660]	@ (8000648 <fsm_traffic_light+0x2d4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003b8:	fb02 f303 	mul.w	r3, r2, r3
 80003bc:	4619      	mov	r1, r3
 80003be:	2000      	movs	r0, #0
 80003c0:	f001 f88e 	bl	80014e0 <setTimerNO>
			setTimerNO(timerX_Led7Seg, 100);
 80003c4:	2164      	movs	r1, #100	@ 0x64
 80003c6:	2002      	movs	r0, #2
 80003c8:	f001 f88a 	bl	80014e0 <setTimerNO>
			setTimerNO(timer_countX, 1000);
 80003cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003d0:	2004      	movs	r0, #4
 80003d2:	f001 f885 	bl	80014e0 <setTimerNO>
			break;
 80003d6:	e0c4      	b.n	8000562 <fsm_traffic_light+0x1ee>
			if(timerFlag[timerX_LED] == 1){
 80003d8:	4b9d      	ldr	r3, [pc, #628]	@ (8000650 <fsm_traffic_light+0x2dc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d119      	bne.n	8000414 <fsm_traffic_light+0xa0>
				status_X = GREEN;
 80003e0:	4b98      	ldr	r3, [pc, #608]	@ (8000644 <fsm_traffic_light+0x2d0>)
 80003e2:	2221      	movs	r2, #33	@ 0x21
 80003e4:	601a      	str	r2, [r3, #0]
				count_X = green_Value;
 80003e6:	4b9b      	ldr	r3, [pc, #620]	@ (8000654 <fsm_traffic_light+0x2e0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a98      	ldr	r2, [pc, #608]	@ (800064c <fsm_traffic_light+0x2d8>)
 80003ec:	6013      	str	r3, [r2, #0]
				setTimerNO(timerX_LED, green_Value * 1000);
 80003ee:	4b99      	ldr	r3, [pc, #612]	@ (8000654 <fsm_traffic_light+0x2e0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	2000      	movs	r0, #0
 80003fe:	f001 f86f 	bl	80014e0 <setTimerNO>
				setTimerNO(timerX_Led7Seg, 100);
 8000402:	2164      	movs	r1, #100	@ 0x64
 8000404:	2002      	movs	r0, #2
 8000406:	f001 f86b 	bl	80014e0 <setTimerNO>
				setTimerNO(timer_countX, 1000);
 800040a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800040e:	2004      	movs	r0, #4
 8000410:	f001 f866 	bl	80014e0 <setTimerNO>
			dispLedX(RED);
 8000414:	200b      	movs	r0, #11
 8000416:	f000 fb29 	bl	8000a6c <dispLedX>
			if(timerFlag[timerX_Led7Seg] == 1){
 800041a:	4b8d      	ldr	r3, [pc, #564]	@ (8000650 <fsm_traffic_light+0x2dc>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d10a      	bne.n	8000438 <fsm_traffic_light+0xc4>
				setTimerNO(timerX_Led7Seg, 100);
 8000422:	2164      	movs	r1, #100	@ 0x64
 8000424:	2002      	movs	r0, #2
 8000426:	f001 f85b 	bl	80014e0 <setTimerNO>
				update7segX(count_X);
 800042a:	4b88      	ldr	r3, [pc, #544]	@ (800064c <fsm_traffic_light+0x2d8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fcb8 	bl	8000da4 <update7segX>
				scan7segX();
 8000434:	f000 fcfe 	bl	8000e34 <scan7segX>
			if(timerFlag[timer_countX] == 1){
 8000438:	4b85      	ldr	r3, [pc, #532]	@ (8000650 <fsm_traffic_light+0x2dc>)
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	2b01      	cmp	r3, #1
 800043e:	f040 808b 	bne.w	8000558 <fsm_traffic_light+0x1e4>
				count_X--;
 8000442:	4b82      	ldr	r3, [pc, #520]	@ (800064c <fsm_traffic_light+0x2d8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	4a80      	ldr	r2, [pc, #512]	@ (800064c <fsm_traffic_light+0x2d8>)
 800044a:	6013      	str	r3, [r2, #0]
				setTimerNO(timer_countX, 1000);
 800044c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000450:	2004      	movs	r0, #4
 8000452:	f001 f845 	bl	80014e0 <setTimerNO>
			break;
 8000456:	e07f      	b.n	8000558 <fsm_traffic_light+0x1e4>
			if (timerFlag[timerX_LED] == 1){
 8000458:	4b7d      	ldr	r3, [pc, #500]	@ (8000650 <fsm_traffic_light+0x2dc>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d119      	bne.n	8000494 <fsm_traffic_light+0x120>
				status_X = RED;
 8000460:	4b78      	ldr	r3, [pc, #480]	@ (8000644 <fsm_traffic_light+0x2d0>)
 8000462:	220b      	movs	r2, #11
 8000464:	601a      	str	r2, [r3, #0]
				count_X = red_Value;
 8000466:	4b78      	ldr	r3, [pc, #480]	@ (8000648 <fsm_traffic_light+0x2d4>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a78      	ldr	r2, [pc, #480]	@ (800064c <fsm_traffic_light+0x2d8>)
 800046c:	6013      	str	r3, [r2, #0]
				setTimerNO(timerX_LED, red_Value * 1000);
 800046e:	4b76      	ldr	r3, [pc, #472]	@ (8000648 <fsm_traffic_light+0x2d4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4619      	mov	r1, r3
 800047c:	2000      	movs	r0, #0
 800047e:	f001 f82f 	bl	80014e0 <setTimerNO>
				setTimerNO(timerX_Led7Seg, 100);
 8000482:	2164      	movs	r1, #100	@ 0x64
 8000484:	2002      	movs	r0, #2
 8000486:	f001 f82b 	bl	80014e0 <setTimerNO>
				setTimerNO(timer_countX, 1000);
 800048a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800048e:	2004      	movs	r0, #4
 8000490:	f001 f826 	bl	80014e0 <setTimerNO>
			dispLedX(YELLOW);
 8000494:	2016      	movs	r0, #22
 8000496:	f000 fae9 	bl	8000a6c <dispLedX>
			if(timerFlag[timerX_Led7Seg] == 1){
 800049a:	4b6d      	ldr	r3, [pc, #436]	@ (8000650 <fsm_traffic_light+0x2dc>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d10a      	bne.n	80004b8 <fsm_traffic_light+0x144>
				setTimerNO(timerX_Led7Seg, 100);
 80004a2:	2164      	movs	r1, #100	@ 0x64
 80004a4:	2002      	movs	r0, #2
 80004a6:	f001 f81b 	bl	80014e0 <setTimerNO>
				update7segX(count_X);
 80004aa:	4b68      	ldr	r3, [pc, #416]	@ (800064c <fsm_traffic_light+0x2d8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fc78 	bl	8000da4 <update7segX>
				scan7segX();
 80004b4:	f000 fcbe 	bl	8000e34 <scan7segX>
			if(timerFlag[timer_countX] == 1){
 80004b8:	4b65      	ldr	r3, [pc, #404]	@ (8000650 <fsm_traffic_light+0x2dc>)
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d14d      	bne.n	800055c <fsm_traffic_light+0x1e8>
				setTimerNO(timer_countX, 1000);
 80004c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004c4:	2004      	movs	r0, #4
 80004c6:	f001 f80b 	bl	80014e0 <setTimerNO>
				count_X--;
 80004ca:	4b60      	ldr	r3, [pc, #384]	@ (800064c <fsm_traffic_light+0x2d8>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	4a5e      	ldr	r2, [pc, #376]	@ (800064c <fsm_traffic_light+0x2d8>)
 80004d2:	6013      	str	r3, [r2, #0]
			break;
 80004d4:	e042      	b.n	800055c <fsm_traffic_light+0x1e8>
			if (timerFlag[timerX_LED] == 1){
 80004d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000650 <fsm_traffic_light+0x2dc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d119      	bne.n	8000512 <fsm_traffic_light+0x19e>
				status_X = YELLOW;
 80004de:	4b59      	ldr	r3, [pc, #356]	@ (8000644 <fsm_traffic_light+0x2d0>)
 80004e0:	2216      	movs	r2, #22
 80004e2:	601a      	str	r2, [r3, #0]
				count_X = yellow_Value;
 80004e4:	4b5c      	ldr	r3, [pc, #368]	@ (8000658 <fsm_traffic_light+0x2e4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a58      	ldr	r2, [pc, #352]	@ (800064c <fsm_traffic_light+0x2d8>)
 80004ea:	6013      	str	r3, [r2, #0]
				setTimerNO(timerX_LED, yellow_Value * 1000);
 80004ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000658 <fsm_traffic_light+0x2e4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004f4:	fb02 f303 	mul.w	r3, r2, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fff0 	bl	80014e0 <setTimerNO>
				setTimerNO(timerX_Led7Seg, 100);
 8000500:	2164      	movs	r1, #100	@ 0x64
 8000502:	2002      	movs	r0, #2
 8000504:	f000 ffec 	bl	80014e0 <setTimerNO>
				setTimerNO(timer_countX, 1000);
 8000508:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800050c:	2004      	movs	r0, #4
 800050e:	f000 ffe7 	bl	80014e0 <setTimerNO>
			dispLedX(GREEN);
 8000512:	2021      	movs	r0, #33	@ 0x21
 8000514:	f000 faaa 	bl	8000a6c <dispLedX>
			if(timerFlag[timerX_Led7Seg] == 1){
 8000518:	4b4d      	ldr	r3, [pc, #308]	@ (8000650 <fsm_traffic_light+0x2dc>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10a      	bne.n	8000536 <fsm_traffic_light+0x1c2>
				setTimerNO(timerX_Led7Seg, 100);
 8000520:	2164      	movs	r1, #100	@ 0x64
 8000522:	2002      	movs	r0, #2
 8000524:	f000 ffdc 	bl	80014e0 <setTimerNO>
				update7segX(count_X);
 8000528:	4b48      	ldr	r3, [pc, #288]	@ (800064c <fsm_traffic_light+0x2d8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc39 	bl	8000da4 <update7segX>
				scan7segX();
 8000532:	f000 fc7f 	bl	8000e34 <scan7segX>
			if(timerFlag[timer_countX] == 1){
 8000536:	4b46      	ldr	r3, [pc, #280]	@ (8000650 <fsm_traffic_light+0x2dc>)
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d110      	bne.n	8000560 <fsm_traffic_light+0x1ec>
				setTimerNO(timer_countX, 1000);
 800053e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000542:	2004      	movs	r0, #4
 8000544:	f000 ffcc 	bl	80014e0 <setTimerNO>
				count_X--;
 8000548:	4b40      	ldr	r3, [pc, #256]	@ (800064c <fsm_traffic_light+0x2d8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	4a3f      	ldr	r2, [pc, #252]	@ (800064c <fsm_traffic_light+0x2d8>)
 8000550:	6013      	str	r3, [r2, #0]
			break;
 8000552:	e005      	b.n	8000560 <fsm_traffic_light+0x1ec>
			break;
 8000554:	bf00      	nop
 8000556:	e004      	b.n	8000562 <fsm_traffic_light+0x1ee>
			break;
 8000558:	bf00      	nop
 800055a:	e002      	b.n	8000562 <fsm_traffic_light+0x1ee>
			break;
 800055c:	bf00      	nop
 800055e:	e000      	b.n	8000562 <fsm_traffic_light+0x1ee>
			break;
 8000560:	bf00      	nop
	}
	//Status Y Case
	switch(status_Y){
 8000562:	4b3e      	ldr	r3, [pc, #248]	@ (800065c <fsm_traffic_light+0x2e8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800056a:	4293      	cmp	r3, r2
 800056c:	d00e      	beq.n	800058c <fsm_traffic_light+0x218>
 800056e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000572:	f280 80f5 	bge.w	8000760 <fsm_traffic_light+0x3ec>
 8000576:	2b21      	cmp	r3, #33	@ 0x21
 8000578:	f000 80b3 	beq.w	80006e2 <fsm_traffic_light+0x36e>
 800057c:	2b21      	cmp	r3, #33	@ 0x21
 800057e:	f300 80ef 	bgt.w	8000760 <fsm_traffic_light+0x3ec>
 8000582:	2b0b      	cmp	r3, #11
 8000584:	d01d      	beq.n	80005c2 <fsm_traffic_light+0x24e>
 8000586:	2b16      	cmp	r3, #22
 8000588:	d06c      	beq.n	8000664 <fsm_traffic_light+0x2f0>
				setTimerNO(timer_countY, 1000);
				count_Y--;
			}
			break;
		default:
			break;
 800058a:	e0e9      	b.n	8000760 <fsm_traffic_light+0x3ec>
			status_Y = GREEN;
 800058c:	4b33      	ldr	r3, [pc, #204]	@ (800065c <fsm_traffic_light+0x2e8>)
 800058e:	2221      	movs	r2, #33	@ 0x21
 8000590:	601a      	str	r2, [r3, #0]
			count_Y = green_Value;
 8000592:	4b30      	ldr	r3, [pc, #192]	@ (8000654 <fsm_traffic_light+0x2e0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a32      	ldr	r2, [pc, #200]	@ (8000660 <fsm_traffic_light+0x2ec>)
 8000598:	6013      	str	r3, [r2, #0]
			setTimerNO(timerY_LED, green_Value * 1000); //25000ms = 25s
 800059a:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <fsm_traffic_light+0x2e0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 ff99 	bl	80014e0 <setTimerNO>
			setTimerNO(timerY_Led7Seg, 100);
 80005ae:	2164      	movs	r1, #100	@ 0x64
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 ff95 	bl	80014e0 <setTimerNO>
			setTimerNO(timer_countY, 1000);
 80005b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005ba:	2005      	movs	r0, #5
 80005bc:	f000 ff90 	bl	80014e0 <setTimerNO>
			break;
 80005c0:	e0d5      	b.n	800076e <fsm_traffic_light+0x3fa>
			if(timerFlag[timerY_LED] == 1){
 80005c2:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <fsm_traffic_light+0x2dc>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d119      	bne.n	80005fe <fsm_traffic_light+0x28a>
				status_Y = GREEN;
 80005ca:	4b24      	ldr	r3, [pc, #144]	@ (800065c <fsm_traffic_light+0x2e8>)
 80005cc:	2221      	movs	r2, #33	@ 0x21
 80005ce:	601a      	str	r2, [r3, #0]
				count_Y = green_Value;
 80005d0:	4b20      	ldr	r3, [pc, #128]	@ (8000654 <fsm_traffic_light+0x2e0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <fsm_traffic_light+0x2ec>)
 80005d6:	6013      	str	r3, [r2, #0]
				setTimerNO(timerY_LED, green_Value * 1000);
 80005d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000654 <fsm_traffic_light+0x2e0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 ff7a 	bl	80014e0 <setTimerNO>
				setTimerNO(timerY_Led7Seg, 100);
 80005ec:	2164      	movs	r1, #100	@ 0x64
 80005ee:	2003      	movs	r0, #3
 80005f0:	f000 ff76 	bl	80014e0 <setTimerNO>
				setTimerNO(timer_countY, 1000);
 80005f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005f8:	2005      	movs	r0, #5
 80005fa:	f000 ff71 	bl	80014e0 <setTimerNO>
			dispLedY(RED);
 80005fe:	200b      	movs	r0, #11
 8000600:	f000 faa2 	bl	8000b48 <dispLedY>
			if(timerFlag[timerY_Led7Seg] == 1){
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <fsm_traffic_light+0x2dc>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d10a      	bne.n	8000622 <fsm_traffic_light+0x2ae>
				setTimerNO(timerY_Led7Seg, 100);
 800060c:	2164      	movs	r1, #100	@ 0x64
 800060e:	2003      	movs	r0, #3
 8000610:	f000 ff66 	bl	80014e0 <setTimerNO>
				update7segY(count_Y);
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <fsm_traffic_light+0x2ec>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fbe7 	bl	8000dec <update7segY>
				scan7segY();
 800061e:	f000 fc43 	bl	8000ea8 <scan7segY>
			if(timerFlag[timer_countY] == 1){
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <fsm_traffic_light+0x2dc>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 809c 	bne.w	8000764 <fsm_traffic_light+0x3f0>
				setTimerNO(timer_countY, 1000);
 800062c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000630:	2005      	movs	r0, #5
 8000632:	f000 ff55 	bl	80014e0 <setTimerNO>
				count_Y--;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <fsm_traffic_light+0x2ec>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a08      	ldr	r2, [pc, #32]	@ (8000660 <fsm_traffic_light+0x2ec>)
 800063e:	6013      	str	r3, [r2, #0]
			break;
 8000640:	e090      	b.n	8000764 <fsm_traffic_light+0x3f0>
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	2000000c 	.word	0x2000000c
 800064c:	200000dc 	.word	0x200000dc
 8000650:	20000210 	.word	0x20000210
 8000654:	20000014 	.word	0x20000014
 8000658:	20000010 	.word	0x20000010
 800065c:	20000008 	.word	0x20000008
 8000660:	200000e0 	.word	0x200000e0
			if (timerFlag[timerY_LED] == 1){
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <fsm_traffic_light+0x400>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d119      	bne.n	80006a0 <fsm_traffic_light+0x32c>
				status_Y = RED;
 800066c:	4b42      	ldr	r3, [pc, #264]	@ (8000778 <fsm_traffic_light+0x404>)
 800066e:	220b      	movs	r2, #11
 8000670:	601a      	str	r2, [r3, #0]
				count_Y = red_Value;
 8000672:	4b42      	ldr	r3, [pc, #264]	@ (800077c <fsm_traffic_light+0x408>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a42      	ldr	r2, [pc, #264]	@ (8000780 <fsm_traffic_light+0x40c>)
 8000678:	6013      	str	r3, [r2, #0]
				setTimerNO(timerY_LED, red_Value * 1000);
 800067a:	4b40      	ldr	r3, [pc, #256]	@ (800077c <fsm_traffic_light+0x408>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	4619      	mov	r1, r3
 8000688:	2001      	movs	r0, #1
 800068a:	f000 ff29 	bl	80014e0 <setTimerNO>
				setTimerNO(timerY_Led7Seg, 100);
 800068e:	2164      	movs	r1, #100	@ 0x64
 8000690:	2003      	movs	r0, #3
 8000692:	f000 ff25 	bl	80014e0 <setTimerNO>
				setTimerNO(timer_countY, 1000);
 8000696:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800069a:	2005      	movs	r0, #5
 800069c:	f000 ff20 	bl	80014e0 <setTimerNO>
			dispLedY(YELLOW);
 80006a0:	2016      	movs	r0, #22
 80006a2:	f000 fa51 	bl	8000b48 <dispLedY>
			if(timerFlag[timerY_Led7Seg] == 1){
 80006a6:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <fsm_traffic_light+0x400>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d10a      	bne.n	80006c4 <fsm_traffic_light+0x350>
				setTimerNO(timerY_Led7Seg, 100);
 80006ae:	2164      	movs	r1, #100	@ 0x64
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 ff15 	bl	80014e0 <setTimerNO>
				update7segY(count_Y);
 80006b6:	4b32      	ldr	r3, [pc, #200]	@ (8000780 <fsm_traffic_light+0x40c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fb96 	bl	8000dec <update7segY>
				scan7segY();
 80006c0:	f000 fbf2 	bl	8000ea8 <scan7segY>
			if(timerFlag[timer_countY] == 1){
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <fsm_traffic_light+0x400>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d14d      	bne.n	8000768 <fsm_traffic_light+0x3f4>
				setTimerNO(timer_countY, 1000);
 80006cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 ff05 	bl	80014e0 <setTimerNO>
				count_Y--;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <fsm_traffic_light+0x40c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a28      	ldr	r2, [pc, #160]	@ (8000780 <fsm_traffic_light+0x40c>)
 80006de:	6013      	str	r3, [r2, #0]
			break;
 80006e0:	e042      	b.n	8000768 <fsm_traffic_light+0x3f4>
			if (timerFlag[timerY_LED] == 1){
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <fsm_traffic_light+0x400>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d119      	bne.n	800071e <fsm_traffic_light+0x3aa>
				status_Y = YELLOW;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <fsm_traffic_light+0x404>)
 80006ec:	2216      	movs	r2, #22
 80006ee:	601a      	str	r2, [r3, #0]
				count_Y = yellow_Value;
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <fsm_traffic_light+0x410>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <fsm_traffic_light+0x40c>)
 80006f6:	6013      	str	r3, [r2, #0]
				setTimerNO(timerY_LED, yellow_Value * 1000);
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <fsm_traffic_light+0x410>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	4619      	mov	r1, r3
 8000706:	2001      	movs	r0, #1
 8000708:	f000 feea 	bl	80014e0 <setTimerNO>
				setTimerNO(timerY_Led7Seg, 100);
 800070c:	2164      	movs	r1, #100	@ 0x64
 800070e:	2003      	movs	r0, #3
 8000710:	f000 fee6 	bl	80014e0 <setTimerNO>
				setTimerNO(timer_countY, 1000);
 8000714:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000718:	2005      	movs	r0, #5
 800071a:	f000 fee1 	bl	80014e0 <setTimerNO>
			dispLedY(GREEN);
 800071e:	2021      	movs	r0, #33	@ 0x21
 8000720:	f000 fa12 	bl	8000b48 <dispLedY>
			if(timerFlag[timerY_Led7Seg] == 1){
 8000724:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <fsm_traffic_light+0x400>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10a      	bne.n	8000742 <fsm_traffic_light+0x3ce>
				setTimerNO(timerY_Led7Seg, 100);
 800072c:	2164      	movs	r1, #100	@ 0x64
 800072e:	2003      	movs	r0, #3
 8000730:	f000 fed6 	bl	80014e0 <setTimerNO>
				update7segY(count_Y);
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <fsm_traffic_light+0x40c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb57 	bl	8000dec <update7segY>
				scan7segY();
 800073e:	f000 fbb3 	bl	8000ea8 <scan7segY>
			if(timerFlag[timer_countY] == 1){
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <fsm_traffic_light+0x400>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d110      	bne.n	800076c <fsm_traffic_light+0x3f8>
				setTimerNO(timer_countY, 1000);
 800074a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800074e:	2005      	movs	r0, #5
 8000750:	f000 fec6 	bl	80014e0 <setTimerNO>
				count_Y--;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <fsm_traffic_light+0x40c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3b01      	subs	r3, #1
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <fsm_traffic_light+0x40c>)
 800075c:	6013      	str	r3, [r2, #0]
			break;
 800075e:	e005      	b.n	800076c <fsm_traffic_light+0x3f8>
			break;
 8000760:	bf00      	nop
 8000762:	e004      	b.n	800076e <fsm_traffic_light+0x3fa>
			break;
 8000764:	bf00      	nop
 8000766:	e002      	b.n	800076e <fsm_traffic_light+0x3fa>
			break;
 8000768:	bf00      	nop
 800076a:	e000      	b.n	800076e <fsm_traffic_light+0x3fa>
			break;
 800076c:	bf00      	nop
	}
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000210 	.word	0x20000210
 8000778:	20000008 	.word	0x20000008
 800077c:	2000000c 	.word	0x2000000c
 8000780:	200000e0 	.word	0x200000e0
 8000784:	20000010 	.word	0x20000010

08000788 <mode_button_scan>:

void mode_button_scan(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	if(isButtonNOPressed(0) == 1){
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fcdd 	bl	800014c <isButtonNOPressed>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d140      	bne.n	800081a <mode_button_scan+0x92>
		red_Draft = red_Value;
 8000798:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <mode_button_scan+0x98>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <mode_button_scan+0x9c>)
 800079e:	6013      	str	r3, [r2, #0]
		yellow_Draft = yellow_Value;
 80007a0:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <mode_button_scan+0xa0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <mode_button_scan+0xa4>)
 80007a6:	6013      	str	r3, [r2, #0]
		green_Draft = green_Value;
 80007a8:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <mode_button_scan+0xa8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <mode_button_scan+0xac>)
 80007ae:	6013      	str	r3, [r2, #0]
		dispLedX(NONE);
 80007b0:	2037      	movs	r0, #55	@ 0x37
 80007b2:	f000 f95b 	bl	8000a6c <dispLedX>
		dispLedY(NONE);
 80007b6:	2037      	movs	r0, #55	@ 0x37
 80007b8:	f000 f9c6 	bl	8000b48 <dispLedY>
		switch(status){
 80007bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <mode_button_scan+0xb0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 80007c4:	d01c      	beq.n	8000800 <mode_button_scan+0x78>
 80007c6:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 80007ca:	dc25      	bgt.n	8000818 <mode_button_scan+0x90>
 80007cc:	f240 124d 	movw	r2, #333	@ 0x14d
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d010      	beq.n	80007f6 <mode_button_scan+0x6e>
 80007d4:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 80007d8:	da1e      	bge.n	8000818 <mode_button_scan+0x90>
 80007da:	2b6f      	cmp	r3, #111	@ 0x6f
 80007dc:	d002      	beq.n	80007e4 <mode_button_scan+0x5c>
 80007de:	2bde      	cmp	r3, #222	@ 0xde
 80007e0:	d004      	beq.n	80007ec <mode_button_scan+0x64>
				status = MODE1;
				status_X = INIT;
				status_Y = INIT;
				break;
			default:
				break;
 80007e2:	e019      	b.n	8000818 <mode_button_scan+0x90>
				status = MODE2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <mode_button_scan+0xb0>)
 80007e6:	22de      	movs	r2, #222	@ 0xde
 80007e8:	601a      	str	r2, [r3, #0]
				break;
 80007ea:	e016      	b.n	800081a <mode_button_scan+0x92>
				status = MODE3;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <mode_button_scan+0xb0>)
 80007ee:	f240 124d 	movw	r2, #333	@ 0x14d
 80007f2:	601a      	str	r2, [r3, #0]
				break;
 80007f4:	e011      	b.n	800081a <mode_button_scan+0x92>
				status = MODE4;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <mode_button_scan+0xb0>)
 80007f8:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 80007fc:	601a      	str	r2, [r3, #0]
				break;
 80007fe:	e00c      	b.n	800081a <mode_button_scan+0x92>
				status = MODE1;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <mode_button_scan+0xb0>)
 8000802:	226f      	movs	r2, #111	@ 0x6f
 8000804:	601a      	str	r2, [r3, #0]
				status_X = INIT;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <mode_button_scan+0xb4>)
 8000808:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800080c:	601a      	str	r2, [r3, #0]
				status_Y = INIT;
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <mode_button_scan+0xb8>)
 8000810:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000814:	601a      	str	r2, [r3, #0]
				break;
 8000816:	e000      	b.n	800081a <mode_button_scan+0x92>
				break;
 8000818:	bf00      	nop
		}
	}
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000018 	.word	0x20000018
 8000828:	20000010 	.word	0x20000010
 800082c:	2000001c 	.word	0x2000001c
 8000830:	20000014 	.word	0x20000014
 8000834:	20000020 	.word	0x20000020
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004
 8000840:	20000008 	.word	0x20000008

08000844 <increase_button_scan>:

void increase_button_scan(){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if(isButtonNOPressed(1) == 1){
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff fc7f 	bl	800014c <isButtonNOPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d13c      	bne.n	80008ce <increase_button_scan+0x8a>
		switch (status) {
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <increase_button_scan+0x90>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 800085c:	d023      	beq.n	80008a6 <increase_button_scan+0x62>
 800085e:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 8000862:	dc2d      	bgt.n	80008c0 <increase_button_scan+0x7c>
 8000864:	2bde      	cmp	r3, #222	@ 0xde
 8000866:	d004      	beq.n	8000872 <increase_button_scan+0x2e>
 8000868:	f240 124d 	movw	r2, #333	@ 0x14d
 800086c:	4293      	cmp	r3, r2
 800086e:	d00d      	beq.n	800088c <increase_button_scan+0x48>
			case MODE4:
				green_Draft++;
				if (green_Draft > 99) green_Draft = 1;
				break;
			default:
				break;
 8000870:	e026      	b.n	80008c0 <increase_button_scan+0x7c>
				red_Draft++;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <increase_button_scan+0x94>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a17      	ldr	r2, [pc, #92]	@ (80008d8 <increase_button_scan+0x94>)
 800087a:	6013      	str	r3, [r2, #0]
				if (red_Draft > 99) red_Draft = 1;
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <increase_button_scan+0x94>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b63      	cmp	r3, #99	@ 0x63
 8000882:	dd1f      	ble.n	80008c4 <increase_button_scan+0x80>
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <increase_button_scan+0x94>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
				break;
 800088a:	e01b      	b.n	80008c4 <increase_button_scan+0x80>
				yellow_Draft++;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <increase_button_scan+0x98>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <increase_button_scan+0x98>)
 8000894:	6013      	str	r3, [r2, #0]
				if (yellow_Draft > 99) yellow_Draft = 1;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <increase_button_scan+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b63      	cmp	r3, #99	@ 0x63
 800089c:	dd14      	ble.n	80008c8 <increase_button_scan+0x84>
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <increase_button_scan+0x98>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
				break;
 80008a4:	e010      	b.n	80008c8 <increase_button_scan+0x84>
				green_Draft++;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <increase_button_scan+0x9c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a0c      	ldr	r2, [pc, #48]	@ (80008e0 <increase_button_scan+0x9c>)
 80008ae:	6013      	str	r3, [r2, #0]
				if (green_Draft > 99) green_Draft = 1;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <increase_button_scan+0x9c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b63      	cmp	r3, #99	@ 0x63
 80008b6:	dd09      	ble.n	80008cc <increase_button_scan+0x88>
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <increase_button_scan+0x9c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
				break;
 80008be:	e005      	b.n	80008cc <increase_button_scan+0x88>
				break;
 80008c0:	bf00      	nop
 80008c2:	e004      	b.n	80008ce <increase_button_scan+0x8a>
				break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <increase_button_scan+0x8a>
				break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <increase_button_scan+0x8a>
				break;
 80008cc:	bf00      	nop
		}
	}
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000018 	.word	0x20000018
 80008dc:	2000001c 	.word	0x2000001c
 80008e0:	20000020 	.word	0x20000020

080008e4 <set_button_scan>:


void set_button_scan(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	if(isButtonNOPressed(2) == 1){
 80008e8:	2002      	movs	r0, #2
 80008ea:	f7ff fc2f 	bl	800014c <isButtonNOPressed>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d133      	bne.n	800095c <set_button_scan+0x78>
		switch (status) {
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <set_button_scan+0x7c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 80008fc:	d021      	beq.n	8000942 <set_button_scan+0x5e>
 80008fe:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 8000902:	dc2a      	bgt.n	800095a <set_button_scan+0x76>
 8000904:	2bde      	cmp	r3, #222	@ 0xde
 8000906:	d004      	beq.n	8000912 <set_button_scan+0x2e>
 8000908:	f240 124d 	movw	r2, #333	@ 0x14d
 800090c:	4293      	cmp	r3, r2
 800090e:	d00c      	beq.n	800092a <set_button_scan+0x46>
			case MODE4:
				green_Value = green_Draft;
				red_Value = yellow_Value + green_Value;
				break;
			default:
				break;
 8000910:	e023      	b.n	800095a <set_button_scan+0x76>
				red_Value = red_Draft;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <set_button_scan+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <set_button_scan+0x84>)
 8000918:	6013      	str	r3, [r2, #0]
				green_Value = red_Value - yellow_Value;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <set_button_scan+0x84>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <set_button_scan+0x88>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <set_button_scan+0x8c>)
 8000926:	6013      	str	r3, [r2, #0]
				break;
 8000928:	e018      	b.n	800095c <set_button_scan+0x78>
				yellow_Value = yellow_Draft;
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <set_button_scan+0x90>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <set_button_scan+0x88>)
 8000930:	6013      	str	r3, [r2, #0]
				green_Value = red_Value - yellow_Value;
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <set_button_scan+0x84>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <set_button_scan+0x88>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <set_button_scan+0x8c>)
 800093e:	6013      	str	r3, [r2, #0]
				break;
 8000940:	e00c      	b.n	800095c <set_button_scan+0x78>
				green_Value = green_Draft;
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <set_button_scan+0x94>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <set_button_scan+0x8c>)
 8000948:	6013      	str	r3, [r2, #0]
				red_Value = yellow_Value + green_Value;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <set_button_scan+0x88>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <set_button_scan+0x8c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <set_button_scan+0x84>)
 8000956:	6013      	str	r3, [r2, #0]
				break;
 8000958:	e000      	b.n	800095c <set_button_scan+0x78>
				break;
 800095a:	bf00      	nop
		}
	}
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000018 	.word	0x20000018
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000010 	.word	0x20000010
 8000970:	20000014 	.word	0x20000014
 8000974:	2000001c 	.word	0x2000001c
 8000978:	20000020 	.word	0x20000020

0800097c <fsm_led_blink>:

void fsm_led_blink()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	switch (status) {
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <fsm_led_blink+0xdc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 8000988:	d045      	beq.n	8000a16 <fsm_led_blink+0x9a>
 800098a:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 800098e:	dc60      	bgt.n	8000a52 <fsm_led_blink+0xd6>
 8000990:	2bde      	cmp	r3, #222	@ 0xde
 8000992:	d004      	beq.n	800099e <fsm_led_blink+0x22>
 8000994:	f240 124d 	movw	r2, #333	@ 0x14d
 8000998:	4293      	cmp	r3, r2
 800099a:	d01e      	beq.n	80009da <fsm_led_blink+0x5e>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, LED_ON);
			disp7segY(4);
			HAL_Delay(500);
			break;
		default:
			break;
 800099c:	e059      	b.n	8000a52 <fsm_led_blink+0xd6>
			blink_Led(RED);
 800099e:	200b      	movs	r0, #11
 80009a0:	f000 f940 	bl	8000c24 <blink_Led>
				update7segX(red_Draft);
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <fsm_led_blink+0xe0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f9fb 	bl	8000da4 <update7segX>
				scan7segX();
 80009ae:	f000 fa41 	bl	8000e34 <scan7segX>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN2_Pin, LED_OFF);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b8:	4829      	ldr	r0, [pc, #164]	@ (8000a60 <fsm_led_blink+0xe4>)
 80009ba:	f001 f936 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, LED_ON);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c4:	4826      	ldr	r0, [pc, #152]	@ (8000a60 <fsm_led_blink+0xe4>)
 80009c6:	f001 f930 	bl	8001c2a <HAL_GPIO_WritePin>
			disp7segY(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f000 f9a4 	bl	8000d18 <disp7segY>
			HAL_Delay(500);
 80009d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d4:	f000 fe64 	bl	80016a0 <HAL_Delay>
			break;
 80009d8:	e03c      	b.n	8000a54 <fsm_led_blink+0xd8>
			blink_Led(YELLOW);
 80009da:	2016      	movs	r0, #22
 80009dc:	f000 f922 	bl	8000c24 <blink_Led>
				update7segX(yellow_Draft);
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <fsm_led_blink+0xe8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f9dd 	bl	8000da4 <update7segX>
				scan7segX();
 80009ea:	f000 fa23 	bl	8000e34 <scan7segX>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN2_Pin, LED_OFF);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f4:	481a      	ldr	r0, [pc, #104]	@ (8000a60 <fsm_led_blink+0xe4>)
 80009f6:	f001 f918 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, LED_ON);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a00:	4817      	ldr	r0, [pc, #92]	@ (8000a60 <fsm_led_blink+0xe4>)
 8000a02:	f001 f912 	bl	8001c2a <HAL_GPIO_WritePin>
			disp7segY(3);
 8000a06:	2003      	movs	r0, #3
 8000a08:	f000 f986 	bl	8000d18 <disp7segY>
			HAL_Delay(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a10:	f000 fe46 	bl	80016a0 <HAL_Delay>
			break;
 8000a14:	e01e      	b.n	8000a54 <fsm_led_blink+0xd8>
			blink_Led(GREEN);
 8000a16:	2021      	movs	r0, #33	@ 0x21
 8000a18:	f000 f904 	bl	8000c24 <blink_Led>
				update7segX(green_Draft);
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <fsm_led_blink+0xec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f9bf 	bl	8000da4 <update7segX>
				scan7segX();
 8000a26:	f000 fa05 	bl	8000e34 <scan7segX>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN2_Pin, LED_OFF);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a30:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <fsm_led_blink+0xe4>)
 8000a32:	f001 f8fa 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, LED_ON);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <fsm_led_blink+0xe4>)
 8000a3e:	f001 f8f4 	bl	8001c2a <HAL_GPIO_WritePin>
			disp7segY(4);
 8000a42:	2004      	movs	r0, #4
 8000a44:	f000 f968 	bl	8000d18 <disp7segY>
			HAL_Delay(500);
 8000a48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a4c:	f000 fe28 	bl	80016a0 <HAL_Delay>
			break;
 8000a50:	e000      	b.n	8000a54 <fsm_led_blink+0xd8>
			break;
 8000a52:	bf00      	nop
	}
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000018 	.word	0x20000018
 8000a60:	40010800 	.word	0x40010800
 8000a64:	2000001c 	.word	0x2000001c
 8000a68:	20000020 	.word	0x20000020

08000a6c <dispLedX>:
 *      Author: LENOVO
 */

#include "led.h"

void dispLedX(int color){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	switch(color){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a78:	d03f      	beq.n	8000afa <dispLedX+0x8e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a7e:	dc4c      	bgt.n	8000b1a <dispLedX+0xae>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b21      	cmp	r3, #33	@ 0x21
 8000a84:	d029      	beq.n	8000ada <dispLedX+0x6e>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b21      	cmp	r3, #33	@ 0x21
 8000a8a:	dc46      	bgt.n	8000b1a <dispLedX+0xae>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b0b      	cmp	r3, #11
 8000a90:	d003      	beq.n	8000a9a <dispLedX+0x2e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b16      	cmp	r3, #22
 8000a96:	d010      	beq.n	8000aba <dispLedX+0x4e>
 8000a98:	e03f      	b.n	8000b1a <dispLedX+0xae>
		case RED:
			HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, LED_ON);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4829      	ldr	r0, [pc, #164]	@ (8000b44 <dispLedX+0xd8>)
 8000aa0:	f001 f8c3 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, LED_OFF);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4826      	ldr	r0, [pc, #152]	@ (8000b44 <dispLedX+0xd8>)
 8000aaa:	f001 f8be 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, LED_OFF);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	4824      	ldr	r0, [pc, #144]	@ (8000b44 <dispLedX+0xd8>)
 8000ab4:	f001 f8b9 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000ab8:	e03f      	b.n	8000b3a <dispLedX+0xce>
		case YELLOW:
			HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, LED_OFF);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2102      	movs	r1, #2
 8000abe:	4821      	ldr	r0, [pc, #132]	@ (8000b44 <dispLedX+0xd8>)
 8000ac0:	f001 f8b3 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, LED_ON);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	481e      	ldr	r0, [pc, #120]	@ (8000b44 <dispLedX+0xd8>)
 8000aca:	f001 f8ae 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, LED_OFF);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	481c      	ldr	r0, [pc, #112]	@ (8000b44 <dispLedX+0xd8>)
 8000ad4:	f001 f8a9 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000ad8:	e02f      	b.n	8000b3a <dispLedX+0xce>
		case GREEN:
			HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, LED_OFF);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2102      	movs	r1, #2
 8000ade:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <dispLedX+0xd8>)
 8000ae0:	f001 f8a3 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, LED_OFF);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	4816      	ldr	r0, [pc, #88]	@ (8000b44 <dispLedX+0xd8>)
 8000aea:	f001 f89e 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, LED_ON);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <dispLedX+0xd8>)
 8000af4:	f001 f899 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000af8:	e01f      	b.n	8000b3a <dispLedX+0xce>
		case ALL:
			HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, LED_ON);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2102      	movs	r1, #2
 8000afe:	4811      	ldr	r0, [pc, #68]	@ (8000b44 <dispLedX+0xd8>)
 8000b00:	f001 f893 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, LED_ON);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2104      	movs	r1, #4
 8000b08:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <dispLedX+0xd8>)
 8000b0a:	f001 f88e 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, LED_ON);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <dispLedX+0xd8>)
 8000b14:	f001 f889 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000b18:	e00f      	b.n	8000b3a <dispLedX+0xce>
		default:
			HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, LED_OFF);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <dispLedX+0xd8>)
 8000b20:	f001 f883 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, LED_OFF);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2104      	movs	r1, #4
 8000b28:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <dispLedX+0xd8>)
 8000b2a:	f001 f87e 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, LED_OFF);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2108      	movs	r1, #8
 8000b32:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <dispLedX+0xd8>)
 8000b34:	f001 f879 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000b38:	bf00      	nop
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010800 	.word	0x40010800

08000b48 <dispLedY>:

void dispLedY(int color){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	switch(color){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b54:	d03f      	beq.n	8000bd6 <dispLedY+0x8e>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b5a:	dc4c      	bgt.n	8000bf6 <dispLedY+0xae>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b21      	cmp	r3, #33	@ 0x21
 8000b60:	d029      	beq.n	8000bb6 <dispLedY+0x6e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b21      	cmp	r3, #33	@ 0x21
 8000b66:	dc46      	bgt.n	8000bf6 <dispLedY+0xae>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b0b      	cmp	r3, #11
 8000b6c:	d003      	beq.n	8000b76 <dispLedY+0x2e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b16      	cmp	r3, #22
 8000b72:	d010      	beq.n	8000b96 <dispLedY+0x4e>
 8000b74:	e03f      	b.n	8000bf6 <dispLedY+0xae>
		case RED:
			HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, LED_ON);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <dispLedY+0xd8>)
 8000b7c:	f001 f855 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, LED_OFF);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2120      	movs	r1, #32
 8000b84:	4826      	ldr	r0, [pc, #152]	@ (8000c20 <dispLedY+0xd8>)
 8000b86:	f001 f850 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, LED_OFF);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2140      	movs	r1, #64	@ 0x40
 8000b8e:	4824      	ldr	r0, [pc, #144]	@ (8000c20 <dispLedY+0xd8>)
 8000b90:	f001 f84b 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000b94:	e03f      	b.n	8000c16 <dispLedY+0xce>
		case YELLOW:
			HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, LED_OFF);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2110      	movs	r1, #16
 8000b9a:	4821      	ldr	r0, [pc, #132]	@ (8000c20 <dispLedY+0xd8>)
 8000b9c:	f001 f845 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, LED_ON);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <dispLedY+0xd8>)
 8000ba6:	f001 f840 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, LED_OFF);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2140      	movs	r1, #64	@ 0x40
 8000bae:	481c      	ldr	r0, [pc, #112]	@ (8000c20 <dispLedY+0xd8>)
 8000bb0:	f001 f83b 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000bb4:	e02f      	b.n	8000c16 <dispLedY+0xce>
		case GREEN:
			HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, LED_OFF);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4819      	ldr	r0, [pc, #100]	@ (8000c20 <dispLedY+0xd8>)
 8000bbc:	f001 f835 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, LED_OFF);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4816      	ldr	r0, [pc, #88]	@ (8000c20 <dispLedY+0xd8>)
 8000bc6:	f001 f830 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, LED_ON);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2140      	movs	r1, #64	@ 0x40
 8000bce:	4814      	ldr	r0, [pc, #80]	@ (8000c20 <dispLedY+0xd8>)
 8000bd0:	f001 f82b 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000bd4:	e01f      	b.n	8000c16 <dispLedY+0xce>
		case ALL:
			HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, LED_ON);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <dispLedY+0xd8>)
 8000bdc:	f001 f825 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, LED_ON);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2120      	movs	r1, #32
 8000be4:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <dispLedY+0xd8>)
 8000be6:	f001 f820 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, LED_ON);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2140      	movs	r1, #64	@ 0x40
 8000bee:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <dispLedY+0xd8>)
 8000bf0:	f001 f81b 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000bf4:	e00f      	b.n	8000c16 <dispLedY+0xce>
		default:
			HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, LED_OFF);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <dispLedY+0xd8>)
 8000bfc:	f001 f815 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, LED_OFF);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2120      	movs	r1, #32
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <dispLedY+0xd8>)
 8000c06:	f001 f810 	bl	8001c2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, LED_OFF);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2140      	movs	r1, #64	@ 0x40
 8000c0e:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <dispLedY+0xd8>)
 8000c10:	f001 f80b 	bl	8001c2a <HAL_GPIO_WritePin>
			break;
 8000c14:	bf00      	nop
	}
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010800 	.word	0x40010800

08000c24 <blink_Led>:

void blink_Led(int led_Color){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	switch (led_Color) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b21      	cmp	r3, #33	@ 0x21
 8000c30:	d01b      	beq.n	8000c6a <blink_Led+0x46>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b21      	cmp	r3, #33	@ 0x21
 8000c36:	dc21      	bgt.n	8000c7c <blink_Led+0x58>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b0b      	cmp	r3, #11
 8000c3c:	d003      	beq.n	8000c46 <blink_Led+0x22>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b16      	cmp	r3, #22
 8000c42:	d009      	beq.n	8000c58 <blink_Led+0x34>
		case GREEN:
			HAL_GPIO_TogglePin(GREEN_X_GPIO_Port, GREEN_X_Pin);
			HAL_GPIO_TogglePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin);
			break;
		default:
			break;
 8000c44:	e01a      	b.n	8000c7c <blink_Led+0x58>
			HAL_GPIO_TogglePin(RED_X_GPIO_Port, RED_X_Pin);
 8000c46:	2102      	movs	r1, #2
 8000c48:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <blink_Led+0x64>)
 8000c4a:	f001 f806 	bl	8001c5a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_Y_GPIO_Port, RED_Y_Pin);
 8000c4e:	2110      	movs	r1, #16
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <blink_Led+0x64>)
 8000c52:	f001 f802 	bl	8001c5a <HAL_GPIO_TogglePin>
			break;
 8000c56:	e012      	b.n	8000c7e <blink_Led+0x5a>
			HAL_GPIO_TogglePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin);
 8000c58:	2104      	movs	r1, #4
 8000c5a:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <blink_Led+0x64>)
 8000c5c:	f000 fffd 	bl	8001c5a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin);
 8000c60:	2120      	movs	r1, #32
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <blink_Led+0x64>)
 8000c64:	f000 fff9 	bl	8001c5a <HAL_GPIO_TogglePin>
			break;
 8000c68:	e009      	b.n	8000c7e <blink_Led+0x5a>
			HAL_GPIO_TogglePin(GREEN_X_GPIO_Port, GREEN_X_Pin);
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <blink_Led+0x64>)
 8000c6e:	f000 fff4 	bl	8001c5a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin);
 8000c72:	2140      	movs	r1, #64	@ 0x40
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <blink_Led+0x64>)
 8000c76:	f000 fff0 	bl	8001c5a <HAL_GPIO_TogglePin>
			break;
 8000c7a:	e000      	b.n	8000c7e <blink_Led+0x5a>
			break;
 8000c7c:	bf00      	nop
	}
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010800 	.word	0x40010800

08000c8c <disp7segX>:
		{0 , 0, 0 , 0 , 0 , 0, 0} , //8
		{0 , 0, 0 , 0 , 1 , 0, 0} , //9
		{1 , 1, 1 , 1 , 1 , 1, 1}   //All Led turn off
};

void disp7segX(int num){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if((num >= 0) && (num <=9)){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1e      	blt.n	8000cd8 <disp7segX+0x4c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	dc1b      	bgt.n	8000cd8 <disp7segX+0x4c>
		for(int state = 0; state < 7; state++){
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e014      	b.n	8000cd0 <disp7segX+0x44>
			HAL_GPIO_WritePin(SEG_A_X_GPIO_Port, SEG_A_X_Pin << state, pinArr[num][state]);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	b299      	uxth	r1, r3
 8000cb0:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <disp7segX+0x84>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	18c2      	adds	r2, r0, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <disp7segX+0x88>)
 8000cc6:	f000 ffb0 	bl	8001c2a <HAL_GPIO_WritePin>
		for(int state = 0; state < 7; state++){
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	dde7      	ble.n	8000ca6 <disp7segX+0x1a>
 8000cd6:	e017      	b.n	8000d08 <disp7segX+0x7c>
		}
	}
	else{ //Turn Off
		for(int state = 0; state < 7; state++){
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	e010      	b.n	8000d00 <disp7segX+0x74>
			HAL_GPIO_WritePin(SEG_A_X_GPIO_Port, SEG_A_X_Pin << state, pinArr[10][state]);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <disp7segX+0x84>)
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	4413      	add	r3, r2
 8000cee:	3346      	adds	r3, #70	@ 0x46
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <disp7segX+0x88>)
 8000cf6:	f000 ff98 	bl	8001c2a <HAL_GPIO_WritePin>
		for(int state = 0; state < 7; state++){
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	ddeb      	ble.n	8000cde <disp7segX+0x52>
		}
	}
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000024 	.word	0x20000024
 8000d14:	40010c00 	.word	0x40010c00

08000d18 <disp7segY>:

void disp7segY(int num){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	if((num >= 0) && (num <=9)){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db1e      	blt.n	8000d64 <disp7segY+0x4c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	dc1b      	bgt.n	8000d64 <disp7segY+0x4c>
		for(int state = 0; state < 7; state++){
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e014      	b.n	8000d5c <disp7segY+0x44>
			HAL_GPIO_WritePin(SEG_A_Y_GPIO_Port, SEG_A_Y_Pin << state, pinArr[num][state]);
 8000d32:	2280      	movs	r2, #128	@ 0x80
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	4817      	ldr	r0, [pc, #92]	@ (8000d9c <disp7segY+0x84>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	18c2      	adds	r2, r0, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <disp7segY+0x88>)
 8000d52:	f000 ff6a 	bl	8001c2a <HAL_GPIO_WritePin>
		for(int state = 0; state < 7; state++){
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	dde7      	ble.n	8000d32 <disp7segY+0x1a>
 8000d62:	e017      	b.n	8000d94 <disp7segY+0x7c>
		}
	}
	else{ //Turn Off
		for(int state = 0; state < 7; state++){
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	e010      	b.n	8000d8c <disp7segY+0x74>
			HAL_GPIO_WritePin(SEG_A_Y_GPIO_Port, SEG_A_Y_Pin << state, pinArr[10][state]);
 8000d6a:	2280      	movs	r2, #128	@ 0x80
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	b299      	uxth	r1, r3
 8000d74:	4a09      	ldr	r2, [pc, #36]	@ (8000d9c <disp7segY+0x84>)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4413      	add	r3, r2
 8000d7a:	3346      	adds	r3, #70	@ 0x46
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4807      	ldr	r0, [pc, #28]	@ (8000da0 <disp7segY+0x88>)
 8000d82:	f000 ff52 	bl	8001c2a <HAL_GPIO_WritePin>
		for(int state = 0; state < 7; state++){
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	ddeb      	ble.n	8000d6a <disp7segY+0x52>
		}
	}
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000024 	.word	0x20000024
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <update7segX>:

void update7segX(int numX){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	led7seg_buffer[0] = numX / 10;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <update7segX+0x40>)
 8000db0:	fb82 1203 	smull	r1, r2, r2, r3
 8000db4:	1092      	asrs	r2, r2, #2
 8000db6:	17db      	asrs	r3, r3, #31
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <update7segX+0x44>)
 8000dbc:	6013      	str	r3, [r2, #0]
	led7seg_buffer[1] = numX % 10;
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <update7segX+0x40>)
 8000dc2:	fb83 2301 	smull	r2, r3, r3, r1
 8000dc6:	109a      	asrs	r2, r3, #2
 8000dc8:	17cb      	asrs	r3, r1, #31
 8000dca:	1ad2      	subs	r2, r2, r3
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	1aca      	subs	r2, r1, r3
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <update7segX+0x44>)
 8000dd8:	605a      	str	r2, [r3, #4]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	66666667 	.word	0x66666667
 8000de8:	200000e4 	.word	0x200000e4

08000dec <update7segY>:

void update7segY(int numY){
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	led7seg_buffer[2] = numY / 10;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <update7segY+0x40>)
 8000df8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfc:	1092      	asrs	r2, r2, #2
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <update7segY+0x44>)
 8000e04:	6093      	str	r3, [r2, #8]
	led7seg_buffer[3] = numY % 10;
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <update7segY+0x40>)
 8000e0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e0e:	109a      	asrs	r2, r3, #2
 8000e10:	17cb      	asrs	r3, r1, #31
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	1aca      	subs	r2, r1, r3
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <update7segY+0x44>)
 8000e20:	60da      	str	r2, [r3, #12]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	66666667 	.word	0x66666667
 8000e30:	200000e4 	.word	0x200000e4

08000e34 <scan7segX>:

int ledDigitX = 0;
int ledDigitY = 0;

void scan7segX(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	switch(ledDigitX){
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <scan7segX+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <scan7segX+0x12>
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d014      	beq.n	8000e6e <scan7segX+0x3a>
		HAL_GPIO_WritePin(EN1_GPIO_Port , EN1_Pin , 0);
		disp7segX(led7seg_buffer[1]) ;
		ledDigitX = 0;
		break ;
	}
}
 8000e44:	e027      	b.n	8000e96 <scan7segX+0x62>
		HAL_GPIO_WritePin(EN0_GPIO_Port , EN0_Pin , 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	4815      	ldr	r0, [pc, #84]	@ (8000ea0 <scan7segX+0x6c>)
 8000e4c:	f000 feed 	bl	8001c2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port , EN1_Pin , 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e56:	4812      	ldr	r0, [pc, #72]	@ (8000ea0 <scan7segX+0x6c>)
 8000e58:	f000 fee7 	bl	8001c2a <HAL_GPIO_WritePin>
		disp7segX(led7seg_buffer[0]) ;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <scan7segX+0x70>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff13 	bl	8000c8c <disp7segX>
		ledDigitX = 1;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <scan7segX+0x68>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
		break ;
 8000e6c:	e013      	b.n	8000e96 <scan7segX+0x62>
		HAL_GPIO_WritePin(EN0_GPIO_Port , EN0_Pin , 1);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2180      	movs	r1, #128	@ 0x80
 8000e72:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <scan7segX+0x6c>)
 8000e74:	f000 fed9 	bl	8001c2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port , EN1_Pin , 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7e:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <scan7segX+0x6c>)
 8000e80:	f000 fed3 	bl	8001c2a <HAL_GPIO_WritePin>
		disp7segX(led7seg_buffer[1]) ;
 8000e84:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <scan7segX+0x70>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff feff 	bl	8000c8c <disp7segX>
		ledDigitX = 0;
 8000e8e:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <scan7segX+0x68>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
		break ;
 8000e94:	bf00      	nop
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000f4 	.word	0x200000f4
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	200000e4 	.word	0x200000e4

08000ea8 <scan7segY>:

void scan7segY(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	switch(ledDigitY){
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <scan7segY+0x6c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <scan7segY+0x12>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d015      	beq.n	8000ee4 <scan7segY+0x3c>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , 0);
		disp7segY(led7seg_buffer[3]) ;
		ledDigitY = 0;
		break ;
	}
}
 8000eb8:	e029      	b.n	8000f0e <scan7segY+0x66>
		HAL_GPIO_WritePin(EN2_GPIO_Port , EN2_Pin , 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec0:	4815      	ldr	r0, [pc, #84]	@ (8000f18 <scan7segY+0x70>)
 8000ec2:	f000 feb2 	bl	8001c2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <scan7segY+0x70>)
 8000ece:	f000 feac 	bl	8001c2a <HAL_GPIO_WritePin>
		disp7segY(led7seg_buffer[2]) ;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <scan7segY+0x74>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff1e 	bl	8000d18 <disp7segY>
		ledDigitY = 1;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <scan7segY+0x6c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
		break ;
 8000ee2:	e014      	b.n	8000f0e <scan7segY+0x66>
		HAL_GPIO_WritePin(EN2_GPIO_Port , EN2_Pin , 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <scan7segY+0x70>)
 8000eec:	f000 fe9d 	bl	8001c2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port , EN3_Pin , 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <scan7segY+0x70>)
 8000ef8:	f000 fe97 	bl	8001c2a <HAL_GPIO_WritePin>
		disp7segY(led7seg_buffer[3]) ;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <scan7segY+0x74>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff09 	bl	8000d18 <disp7segY>
		ledDigitY = 0;
 8000f06:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <scan7segY+0x6c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
		break ;
 8000f0c:	bf00      	nop
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000f8 	.word	0x200000f8
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	200000e4 	.word	0x200000e4

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f24:	f000 fb5a 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f814 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f000 f89a 	bl	8001064 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f30:	f000 f84c 	bl	8000fcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <main+0x2c>)
 8000f36:	f001 fad7 	bl	80024e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  SCH_Add_Task(fsm_run, 1, 10);
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <main+0x30>)
 8000f40:	f000 f8fa 	bl	8001138 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    SCH_Dispatch_Task();
 8000f44:	f000 f9b8 	bl	80012b8 <SCH_Dispatch_Task>
 8000f48:	e7fc      	b.n	8000f44 <main+0x24>
 8000f4a:	bf00      	nop
 8000f4c:	200000fc 	.word	0x200000fc
 8000f50:	080002e9 	.word	0x080002e9

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b090      	sub	sp, #64	@ 0x40
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	2228      	movs	r2, #40	@ 0x28
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fe4c 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7e:	2310      	movs	r3, #16
 8000f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fe7e 	bl	8001c8c <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f96:	f000 f8c9 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f8ec 	bl	8002190 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fbe:	f000 f8b5 	bl	800112c <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3740      	adds	r7, #64	@ 0x40
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <MX_TIM2_Init+0x94>)
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_TIM2_Init+0x94>)
 8000ff2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ff6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <MX_TIM2_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <MX_TIM2_Init+0x94>)
 8001000:	2209      	movs	r2, #9
 8001002:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <MX_TIM2_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_TIM2_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <MX_TIM2_Init+0x94>)
 8001012:	f001 fa19 	bl	8002448 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800101c:	f000 f886 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <MX_TIM2_Init+0x94>)
 800102e:	f001 fb97 	bl	8002760 <HAL_TIM_ConfigClockSource>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001038:	f000 f878 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <MX_TIM2_Init+0x94>)
 800104a:	f001 fd6f 	bl	8002b2c <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001054:	f000 f86a 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000fc 	.word	0x200000fc

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <MX_GPIO_Init+0xbc>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <MX_GPIO_Init+0xbc>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <MX_GPIO_Init+0xbc>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <MX_GPIO_Init+0xbc>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a22      	ldr	r2, [pc, #136]	@ (8001120 <MX_GPIO_Init+0xbc>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <MX_GPIO_Init+0xbc>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin|RED_Y_Pin
 80010a8:	2200      	movs	r2, #0
 80010aa:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80010ae:	481d      	ldr	r0, [pc, #116]	@ (8001124 <MX_GPIO_Init+0xc0>)
 80010b0:	f000 fdbb 	bl	8001c2a <HAL_GPIO_WritePin>
                          |YELLOW_Y_Pin|GREEN_Y_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_X_Pin|SEG_B_X_Pin|SEG_C_X_Pin|SEG_D_Y_Pin
 80010b4:	2200      	movs	r2, #0
 80010b6:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80010ba:	481b      	ldr	r0, [pc, #108]	@ (8001128 <MX_GPIO_Init+0xc4>)
 80010bc:	f000 fdb5 	bl	8001c2a <HAL_GPIO_WritePin>
                          |SEG_B_Y_Pin|SEG_C_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_X_Pin YELLOW_X_Pin GREEN_X_Pin RED_Y_Pin
                           YELLOW_Y_Pin GREEN_Y_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin|RED_Y_Pin
 80010c0:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80010c4:	60bb      	str	r3, [r7, #8]
                          |YELLOW_Y_Pin|GREEN_Y_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2302      	movs	r3, #2
 80010d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <MX_GPIO_Init+0xc0>)
 80010da:	f000 fc13 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_X_Pin SEG_B_X_Pin SEG_C_X_Pin SEG_D_Y_Pin
                           SEG_E_Y_Pin SEG_F_Y_Pin SEG_G_Y_Pin SEG_D_X_Pin
                           SEG_E_X_Pin SEG_F_X_Pin SEG_G_X_Pin SEG_A_Y_Pin
                           SEG_B_Y_Pin SEG_C_Y_Pin */
  GPIO_InitStruct.Pin = SEG_A_X_Pin|SEG_B_X_Pin|SEG_C_X_Pin|SEG_D_Y_Pin
 80010de:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80010e2:	60bb      	str	r3, [r7, #8]
                          |SEG_E_Y_Pin|SEG_F_Y_Pin|SEG_G_Y_Pin|SEG_D_X_Pin
                          |SEG_E_X_Pin|SEG_F_X_Pin|SEG_G_X_Pin|SEG_A_Y_Pin
                          |SEG_B_Y_Pin|SEG_C_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4619      	mov	r1, r3
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <MX_GPIO_Init+0xc4>)
 80010f8:	f000 fc04 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin;
 80010fc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001100:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4619      	mov	r1, r3
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_GPIO_Init+0xc0>)
 8001112:	f000 fbf7 	bl	8001904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <SCH_Add_Task>:
{
	current_index_task = 0;
}

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS)
 8001144:	4b29      	ldr	r3, [pc, #164]	@ (80011ec <SCH_Add_Task+0xb4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	d84a      	bhi.n	80011e2 <SCH_Add_Task+0xaa>
	{
		SCH_tasks_G[current_index_task].pTask = pFunction;
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <SCH_Add_Task+0xb4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <SCH_Add_Task+0xb8>)
 8001154:	460b      	mov	r3, r1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/10;
 8001162:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <SCH_Add_Task+0xb4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4a22      	ldr	r2, [pc, #136]	@ (80011f4 <SCH_Add_Task+0xbc>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	491f      	ldr	r1, [pc, #124]	@ (80011f0 <SCH_Add_Task+0xb8>)
 8001174:	4603      	mov	r3, r0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4403      	add	r3, r0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3304      	adds	r3, #4
 8001180:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/10;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <SCH_Add_Task+0xb4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a1a      	ldr	r2, [pc, #104]	@ (80011f4 <SCH_Add_Task+0xbc>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	4917      	ldr	r1, [pc, #92]	@ (80011f0 <SCH_Add_Task+0xb8>)
 8001194:	4603      	mov	r3, r0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4403      	add	r3, r0
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	3308      	adds	r3, #8
 80011a0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <SCH_Add_Task+0xb4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a11      	ldr	r2, [pc, #68]	@ (80011f0 <SCH_Add_Task+0xb8>)
 80011aa:	460b      	mov	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	330c      	adds	r3, #12
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <SCH_Add_Task+0xb4>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <SCH_Add_Task+0xb4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <SCH_Add_Task+0xb8>)
 80011c8:	460b      	mov	r3, r1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3310      	adds	r3, #16
 80011d4:	6018      	str	r0, [r3, #0]

		current_index_task++;
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <SCH_Add_Task+0xb4>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <SCH_Add_Task+0xb4>)
 80011e0:	701a      	strb	r2, [r3, #0]
	}
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200001e4 	.word	0x200001e4
 80011f0:	20000144 	.word	0x20000144
 80011f4:	cccccccd 	.word	0xcccccccd

080011f8 <SCH_Update>:

void SCH_Update(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	e048      	b.n	8001296 <SCH_Update+0x9e>
	{
		if(SCH_tasks_G[i].Delay > 0)
 8001204:	492a      	ldr	r1, [pc, #168]	@ (80012b0 <SCH_Update+0xb8>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d013      	beq.n	8001242 <SCH_Update+0x4a>
		{
			SCH_tasks_G[i].Delay--;
 800121a:	4925      	ldr	r1, [pc, #148]	@ (80012b0 <SCH_Update+0xb8>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3304      	adds	r3, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1e59      	subs	r1, r3, #1
 800122e:	4820      	ldr	r0, [pc, #128]	@ (80012b0 <SCH_Update+0xb8>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4403      	add	r3, r0
 800123c:	3304      	adds	r3, #4
 800123e:	6019      	str	r1, [r3, #0]
 8001240:	e026      	b.n	8001290 <SCH_Update+0x98>
		}
		else
		{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001242:	491b      	ldr	r1, [pc, #108]	@ (80012b0 <SCH_Update+0xb8>)
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3308      	adds	r3, #8
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <SCH_Update+0xb8>)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4403      	add	r3, r0
 8001262:	3304      	adds	r3, #4
 8001264:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001266:	4912      	ldr	r1, [pc, #72]	@ (80012b0 <SCH_Update+0xb8>)
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	330c      	adds	r3, #12
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <SCH_Update+0xb8>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	330c      	adds	r3, #12
 800128c:	4602      	mov	r2, r0
 800128e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <SCH_Update+0xbc>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4293      	cmp	r3, r2
 80012a0:	dbb0      	blt.n	8001204 <SCH_Update+0xc>
		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000144 	.word	0x20000144
 80012b4:	200001e4 	.word	0x200001e4

080012b8 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e03a      	b.n	800133a <SCH_Dispatch_Task+0x82>
	{
		if(SCH_tasks_G[i].RunMe > 0)
 80012c4:	4922      	ldr	r1, [pc, #136]	@ (8001350 <SCH_Dispatch_Task+0x98>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	330c      	adds	r3, #12
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d02c      	beq.n	8001334 <SCH_Dispatch_Task+0x7c>
		{
			SCH_tasks_G[i].RunMe--;
 80012da:	491d      	ldr	r1, [pc, #116]	@ (8001350 <SCH_Dispatch_Task+0x98>)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	330c      	adds	r3, #12
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b2d8      	uxtb	r0, r3
 80012f0:	4917      	ldr	r1, [pc, #92]	@ (8001350 <SCH_Dispatch_Task+0x98>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	330c      	adds	r3, #12
 8001300:	4602      	mov	r2, r0
 8001302:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001304:	4912      	ldr	r1, [pc, #72]	@ (8001350 <SCH_Dispatch_Task+0x98>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4798      	blx	r3
			if(SCH_tasks_G[i].Period == 0)
 8001316:	490e      	ldr	r1, [pc, #56]	@ (8001350 <SCH_Dispatch_Task+0x98>)
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	3308      	adds	r3, #8
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <SCH_Dispatch_Task+0x7c>
			{
				SCH_Delete(i);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f812 	bl	8001358 <SCH_Delete>
	for(int i = 0; i < current_index_task; i++)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3301      	adds	r3, #1
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <SCH_Dispatch_Task+0x9c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4293      	cmp	r3, r2
 8001344:	dbbe      	blt.n	80012c4 <SCH_Dispatch_Task+0xc>
			}
		}
	}
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000144 	.word	0x20000144
 8001354:	200001e4 	.word	0x200001e4

08001358 <SCH_Delete>:

void SCH_Delete(uint32_t ID)
{
 8001358:	b4b0      	push	{r4, r5, r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	for(int i = ID; i < SCH_MAX_TASKS - 1; i++)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e017      	b.n	8001396 <SCH_Delete+0x3e>
	{
		SCH_tasks_G[i] = SCH_tasks_G[i+1];
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <SCH_Delete+0x5c>)
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	460b      	mov	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4418      	add	r0, r3
 8001378:	490e      	ldr	r1, [pc, #56]	@ (80013b4 <SCH_Delete+0x5c>)
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	4604      	mov	r4, r0
 8001386:	461d      	mov	r5, r3
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	6023      	str	r3, [r4, #0]
	for(int i = ID; i < SCH_MAX_TASKS - 1; i++)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b06      	cmp	r3, #6
 800139a:	dde4      	ble.n	8001366 <SCH_Delete+0xe>
	}
	current_index_task = current_index_task - 1;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <SCH_Delete+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SCH_Delete+0x60>)
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bcb0      	pop	{r4, r5, r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000144 	.word	0x20000144
 80013b8:	200001e4 	.word	0x200001e4

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a14      	ldr	r2, [pc, #80]	@ (8001418 <HAL_MspInit+0x5c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_MspInit+0x5c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_MspInit+0x60>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_MspInit+0x60>)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000

08001420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001430:	d113      	bne.n	800145a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_TIM_Base_MspInit+0x44>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_TIM_Base_MspInit+0x44>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	201c      	movs	r0, #28
 8001450:	f000 fa21 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001454:	201c      	movs	r0, #28
 8001456:	f000 fa3a 	bl	80018ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f8d6 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <TIM2_IRQHandler+0x10>)
 80014c6:	f001 f85b 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000fc 	.word	0x200000fc

080014d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <setTimerNO>:
							   0, 0, 0, 0, 0 };

int timerFlag[NO_TIMER] = {0, 0, 0, 0, 0,
						   0, 0, 0, 0, 0 };

void setTimerNO(int timerNO, int duration){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	timerDuration[timerNO] = duration / TIMER_CYCLE;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <setTimerNO+0x34>)
 80014ee:	fb82 1203 	smull	r1, r2, r2, r3
 80014f2:	1092      	asrs	r2, r2, #2
 80014f4:	17db      	asrs	r3, r3, #31
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	4907      	ldr	r1, [pc, #28]	@ (8001518 <setTimerNO+0x38>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[timerNO] = 0;
 8001500:	4a06      	ldr	r2, [pc, #24]	@ (800151c <setTimerNO+0x3c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2100      	movs	r1, #0
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	66666667 	.word	0x66666667
 8001518:	200001e8 	.word	0x200001e8
 800151c:	20000210 	.word	0x20000210

08001520 <timerRun>:
void resetTimer(int timerNO){
	timerDuration[timerNO] = 0;
	timerFlag[timerNO] = 0;
}

void timerRun(){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_TIMER; i++){
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e016      	b.n	800155a <timerRun+0x3a>
		timerDuration[i]--;
 800152c:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <timerRun+0x4c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <timerRun+0x4c>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (timerDuration[i] == 0){
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <timerRun+0x4c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <timerRun+0x34>
			timerFlag[i] = 1;
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <timerRun+0x50>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2101      	movs	r1, #1
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_TIMER; i++){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b09      	cmp	r3, #9
 800155e:	dde5      	ble.n	800152c <timerRun+0xc>
		}
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	200001e8 	.word	0x200001e8
 8001570:	20000210 	.word	0x20000210

08001574 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	timerRun();
 800157c:	f7ff ffd0 	bl	8001520 <timerRun>
	buttonReading();
 8001580:	f7fe fe3c 	bl	80001fc <buttonReading>
	SCH_Update();
 8001584:	f7ff fe38 	bl	80011f8 <SCH_Update>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff ffa0 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001596:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001598:	4a0c      	ldr	r2, [pc, #48]	@ (80015cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a09      	ldr	r2, [pc, #36]	@ (80015d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015ac:	4c09      	ldr	r4, [pc, #36]	@ (80015d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f001 fb29 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015be:	f7ff fcaf 	bl	8000f20 <main>
  bx lr
 80015c2:	4770      	bx	lr
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80015cc:	08002c9c 	.word	0x08002c9c
  ldr r2, =_sbss
 80015d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80015d4:	2000023c 	.word	0x2000023c

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_Init+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <HAL_Init+0x28>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f947 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fee0 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f95f 	bl	80018ea <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f927 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000074 	.word	0x20000074
 8001660:	2000007c 	.word	0x2000007c
 8001664:	20000078 	.word	0x20000078

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_IncTick+0x1c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_IncTick+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a03      	ldr	r2, [pc, #12]	@ (8001688 <HAL_IncTick+0x20>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	2000007c 	.word	0x2000007c
 8001688:	20000238 	.word	0x20000238

0800168c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b02      	ldr	r3, [pc, #8]	@ (800169c <HAL_GetTick+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000238 	.word	0x20000238

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff fff0 	bl	800168c <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffe0 	bl	800168c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000007c 	.word	0x2000007c

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4906      	ldr	r1, [pc, #24]	@ (8001780 <__NVIC_EnableIRQ+0x34>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	@ (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	@ (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff90 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff2d 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff42 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff90 	bl	80017d8 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5f 	bl	8001784 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff35 	bl	800174c <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b08b      	sub	sp, #44	@ 0x2c
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	e161      	b.n	8001bdc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001918:	2201      	movs	r2, #1
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	429a      	cmp	r2, r3
 8001932:	f040 8150 	bne.w	8001bd6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a97      	ldr	r2, [pc, #604]	@ (8001b98 <HAL_GPIO_Init+0x294>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d05e      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001940:	4a95      	ldr	r2, [pc, #596]	@ (8001b98 <HAL_GPIO_Init+0x294>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d875      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 8001946:	4a95      	ldr	r2, [pc, #596]	@ (8001b9c <HAL_GPIO_Init+0x298>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d058      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 800194c:	4a93      	ldr	r2, [pc, #588]	@ (8001b9c <HAL_GPIO_Init+0x298>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d86f      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 8001952:	4a93      	ldr	r2, [pc, #588]	@ (8001ba0 <HAL_GPIO_Init+0x29c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d052      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001958:	4a91      	ldr	r2, [pc, #580]	@ (8001ba0 <HAL_GPIO_Init+0x29c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d869      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 800195e:	4a91      	ldr	r2, [pc, #580]	@ (8001ba4 <HAL_GPIO_Init+0x2a0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d04c      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001964:	4a8f      	ldr	r2, [pc, #572]	@ (8001ba4 <HAL_GPIO_Init+0x2a0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d863      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 800196a:	4a8f      	ldr	r2, [pc, #572]	@ (8001ba8 <HAL_GPIO_Init+0x2a4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d046      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001970:	4a8d      	ldr	r2, [pc, #564]	@ (8001ba8 <HAL_GPIO_Init+0x2a4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d85d      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 8001976:	2b12      	cmp	r3, #18
 8001978:	d82a      	bhi.n	80019d0 <HAL_GPIO_Init+0xcc>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d859      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 800197e:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <HAL_GPIO_Init+0x80>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	080019ff 	.word	0x080019ff
 8001988:	080019d9 	.word	0x080019d9
 800198c:	080019eb 	.word	0x080019eb
 8001990:	08001a2d 	.word	0x08001a2d
 8001994:	08001a33 	.word	0x08001a33
 8001998:	08001a33 	.word	0x08001a33
 800199c:	08001a33 	.word	0x08001a33
 80019a0:	08001a33 	.word	0x08001a33
 80019a4:	08001a33 	.word	0x08001a33
 80019a8:	08001a33 	.word	0x08001a33
 80019ac:	08001a33 	.word	0x08001a33
 80019b0:	08001a33 	.word	0x08001a33
 80019b4:	08001a33 	.word	0x08001a33
 80019b8:	08001a33 	.word	0x08001a33
 80019bc:	08001a33 	.word	0x08001a33
 80019c0:	08001a33 	.word	0x08001a33
 80019c4:	08001a33 	.word	0x08001a33
 80019c8:	080019e1 	.word	0x080019e1
 80019cc:	080019f5 	.word	0x080019f5
 80019d0:	4a76      	ldr	r2, [pc, #472]	@ (8001bac <HAL_GPIO_Init+0x2a8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d6:	e02c      	b.n	8001a32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e029      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	3304      	adds	r3, #4
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e024      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	3308      	adds	r3, #8
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e01f      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	330c      	adds	r3, #12
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e01a      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a06:	2304      	movs	r3, #4
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e013      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a14:	2308      	movs	r3, #8
 8001a16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	611a      	str	r2, [r3, #16]
          break;
 8001a1e:	e009      	b.n	8001a34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	615a      	str	r2, [r3, #20]
          break;
 8001a2a:	e003      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          break;
 8001a32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2bff      	cmp	r3, #255	@ 0xff
 8001a38:	d801      	bhi.n	8001a3e <HAL_GPIO_Init+0x13a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	e001      	b.n	8001a42 <HAL_GPIO_Init+0x13e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3304      	adds	r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2bff      	cmp	r3, #255	@ 0xff
 8001a48:	d802      	bhi.n	8001a50 <HAL_GPIO_Init+0x14c>
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x152>
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	3b08      	subs	r3, #8
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	6a39      	ldr	r1, [r7, #32]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	431a      	orrs	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80a9 	beq.w	8001bd6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a84:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <HAL_GPIO_Init+0x2ac>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a49      	ldr	r2, [pc, #292]	@ (8001bb0 <HAL_GPIO_Init+0x2ac>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b47      	ldr	r3, [pc, #284]	@ (8001bb0 <HAL_GPIO_Init+0x2ac>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a9c:	4a45      	ldr	r2, [pc, #276]	@ (8001bb4 <HAL_GPIO_Init+0x2b0>)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb8 <HAL_GPIO_Init+0x2b4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3c      	ldr	r2, [pc, #240]	@ (8001bbc <HAL_GPIO_Init+0x2b8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x1dc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc0 <HAL_GPIO_Init+0x2bc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x1d8>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af6:	492f      	ldr	r1, [pc, #188]	@ (8001bb4 <HAL_GPIO_Init+0x2b0>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	492b      	ldr	r1, [pc, #172]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4927      	ldr	r1, [pc, #156]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4921      	ldr	r1, [pc, #132]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b46:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	491d      	ldr	r1, [pc, #116]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4917      	ldr	r1, [pc, #92]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4913      	ldr	r1, [pc, #76]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01f      	beq.n	8001bc8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b88:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	490d      	ldr	r1, [pc, #52]	@ (8001bc4 <HAL_GPIO_Init+0x2c0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e01f      	b.n	8001bd6 <HAL_GPIO_Init+0x2d2>
 8001b96:	bf00      	nop
 8001b98:	10320000 	.word	0x10320000
 8001b9c:	10310000 	.word	0x10310000
 8001ba0:	10220000 	.word	0x10220000
 8001ba4:	10210000 	.word	0x10210000
 8001ba8:	10120000 	.word	0x10120000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_GPIO_Init+0x2f4>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4909      	ldr	r1, [pc, #36]	@ (8001bf8 <HAL_GPIO_Init+0x2f4>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	3301      	adds	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f ae96 	bne.w	8001918 <HAL_GPIO_Init+0x14>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	372c      	adds	r7, #44	@ 0x2c
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	4613      	mov	r3, r2
 8001c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3a:	787b      	ldrb	r3, [r7, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	041a      	lsls	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e272      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b92      	ldr	r3, [pc, #584]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d112      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x12c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d168      	bne.n	8001db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e24c      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x76>
 8001cf4:	4b80      	ldr	r3, [pc, #512]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b78      	ldr	r3, [pc, #480]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0xbc>
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a71      	ldr	r2, [pc, #452]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b68      	ldr	r3, [pc, #416]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a67      	ldr	r2, [pc, #412]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fc90 	bl	800168c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fc8c 	bl	800168c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e200      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe4>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc7c 	bl	800168c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc78 	bl	800168c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1ec      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x10c>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dd2:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
 8001dde:	4b46      	ldr	r3, [pc, #280]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1c0      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4939      	ldr	r1, [pc, #228]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e03a      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fc31 	bl	800168c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fc2d 	bl	800168c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1a1      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4927      	ldr	r1, [pc, #156]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc10 	bl	800168c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc0c 	bl	800168c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e180      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03a      	beq.n	8001f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d019      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea2:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fbf0 	bl	800168c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fbec 	bl	800168c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e160      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f000 fa9c 	bl	800240c <RCC_Delay>
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fbd6 	bl	800168c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	e00f      	b.n	8001f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fbd2 	bl	800168c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e146      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	42420000 	.word	0x42420000
 8001f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	4b92      	ldr	r3, [pc, #584]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e9      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a6 	beq.w	800206a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b8b      	ldr	r3, [pc, #556]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a87      	ldr	r2, [pc, #540]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b85      	ldr	r3, [pc, #532]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b82      	ldr	r3, [pc, #520]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b7f      	ldr	r3, [pc, #508]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb93 	bl	800168c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fb8f 	bl	800168c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	@ 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e103      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b75      	ldr	r3, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x312>
 8001f90:	4b6f      	ldr	r3, [pc, #444]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a6e      	ldr	r2, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e02d      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a69      	ldr	r2, [pc, #420]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b67      	ldr	r3, [pc, #412]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a66      	ldr	r2, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x356>
 8001fc8:	4b61      	ldr	r3, [pc, #388]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a60      	ldr	r2, [pc, #384]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b58      	ldr	r3, [pc, #352]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a57      	ldr	r2, [pc, #348]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7ff fb43 	bl	800168c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fb3f 	bl	800168c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0b1      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x37e>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff fb2d 	bl	800168c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fb29 	bl	800168c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e09b      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a3b      	ldr	r2, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d061      	beq.n	8002144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d146      	bne.n	8002116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fafd 	bl	800168c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff faf9 	bl	800168c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e06d      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020be:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4921      	ldr	r1, [pc, #132]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a19      	ldr	r1, [r3, #32]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	430b      	orrs	r3, r1
 80020e2:	491b      	ldr	r1, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4cc>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff facd 	bl	800168c <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff fac9 	bl	800168c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46a>
 8002114:	e035      	b.n	8002182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_RCC_OscConfig+0x4cc>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fab6 	bl	800168c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fab2 	bl	800168c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e026      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x498>
 8002142:	e01e      	b.n	8002182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e019      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_OscConfig+0x500>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d0      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b67      	ldr	r3, [pc, #412]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4965      	ldr	r1, [pc, #404]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b59      	ldr	r3, [pc, #356]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002204:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800220e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b50      	ldr	r3, [pc, #320]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	494d      	ldr	r1, [pc, #308]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d040      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e073      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b3d      	ldr	r3, [pc, #244]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06b      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4936      	ldr	r1, [pc, #216]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002280:	f7ff fa04 	bl	800168c <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7ff fa00 	bl	800168c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e053      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4922      	ldr	r1, [pc, #136]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e032      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4916      	ldr	r1, [pc, #88]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490e      	ldr	r1, [pc, #56]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231e:	f000 f821 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490a      	ldr	r1, [pc, #40]	@ (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1cc>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f962 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08002c70 	.word	0x08002c70
 800235c:	20000074 	.word	0x20000074
 8002360:	20000078 	.word	0x20000078

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x30>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x36>
 8002392:	e027      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002396:	613b      	str	r3, [r7, #16]
      break;
 8002398:	e027      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	4a17      	ldr	r2, [pc, #92]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b2:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0c5b      	lsrs	r3, r3, #17
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	fb03 f202 	mul.w	r2, r3, r2
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e004      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	613b      	str	r3, [r7, #16]
      break;
 80023e2:	e002      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ea:	693b      	ldr	r3, [r7, #16]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	08002c80 	.word	0x08002c80
 8002404:	08002c90 	.word	0x08002c90
 8002408:	003d0900 	.word	0x003d0900

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000074 	.word	0x20000074
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e041      	b.n	80024de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe ffd6 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 fa56 	bl	8002938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e035      	b.n	800256c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	@ (8002578 <HAL_TIM_Base_Start_IT+0x90>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252a:	d004      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a12      	ldr	r2, [pc, #72]	@ (800257c <HAL_TIM_Base_Start_IT+0x94>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d111      	bne.n	800255a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d010      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	e007      	b.n	800256a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400

08002580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f998 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f98b 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f99a 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d020      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0204 	mvn.w	r2, #4
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f972 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f965 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f974 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0208 	mvn.w	r2, #8
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f94c 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f93f 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f94e 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0210 	mvn.w	r2, #16
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2208      	movs	r2, #8
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f926 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f919 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f928 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe ff44 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa6f 	bl	8002bee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8f8 	bl	8002924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0220 	mvn.w	r2, #32
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa42 	bl	8002bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIM_ConfigClockSource+0x1c>
 8002778:	2302      	movs	r3, #2
 800277a:	e0b4      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x186>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b4:	d03e      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0xd4>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ba:	f200 8087 	bhi.w	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c2:	f000 8086 	beq.w	80028d2 <HAL_TIM_ConfigClockSource+0x172>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	d87f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b70      	cmp	r3, #112	@ 0x70
 80027ce:	d01a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0xa6>
 80027d0:	2b70      	cmp	r3, #112	@ 0x70
 80027d2:	d87b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b60      	cmp	r3, #96	@ 0x60
 80027d6:	d050      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x11a>
 80027d8:	2b60      	cmp	r3, #96	@ 0x60
 80027da:	d877      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b50      	cmp	r3, #80	@ 0x50
 80027de:	d03c      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xfa>
 80027e0:	2b50      	cmp	r3, #80	@ 0x50
 80027e2:	d873      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d058      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x13a>
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d86f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b30      	cmp	r3, #48	@ 0x30
 80027ee:	d064      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b30      	cmp	r3, #48	@ 0x30
 80027f2:	d86b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d060      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d867      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d05a      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	e062      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002816:	f000 f96a 	bl	8002aee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	609a      	str	r2, [r3, #8]
      break;
 8002832:	e04f      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002844:	f000 f953 	bl	8002aee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002856:	609a      	str	r2, [r3, #8]
      break;
 8002858:	e03c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8ca 	bl	8002a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2150      	movs	r1, #80	@ 0x50
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f921 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002878:	e02c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f8e8 	bl	8002a5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2160      	movs	r1, #96	@ 0x60
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f911 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002898:	e01c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f8aa 	bl	8002a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2140      	movs	r1, #64	@ 0x40
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f901 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80028b8:	e00c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 f8f8 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80028ca:	e003      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e000      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a2b      	ldr	r2, [pc, #172]	@ (80029f8 <TIM_Base_SetConfig+0xc0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_Base_SetConfig+0x28>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0x28>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a28      	ldr	r2, [pc, #160]	@ (80029fc <TIM_Base_SetConfig+0xc4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <TIM_Base_SetConfig+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x52>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x52>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <TIM_Base_SetConfig+0xc4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a0d      	ldr	r2, [pc, #52]	@ (80029f8 <TIM_Base_SetConfig+0xc0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d103      	bne.n	80029d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f023 0201 	bic.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
  }
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400

08002a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f023 030a 	bic.w	r3, r3, #10
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f023 0210 	bic.w	r2, r3, #16
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	621a      	str	r2, [r3, #32]
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f043 0307 	orr.w	r3, r3, #7
 8002adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	609a      	str	r2, [r3, #8]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e041      	b.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b90:	d004      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400

08002bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <memset>:
 8002c00:	4603      	mov	r3, r0
 8002c02:	4402      	add	r2, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	2600      	movs	r6, #0
 8002c14:	4d0c      	ldr	r5, [pc, #48]	@ (8002c48 <__libc_init_array+0x38>)
 8002c16:	4c0d      	ldr	r4, [pc, #52]	@ (8002c4c <__libc_init_array+0x3c>)
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	f000 f81a 	bl	8002c58 <_init>
 8002c24:	2600      	movs	r6, #0
 8002c26:	4d0a      	ldr	r5, [pc, #40]	@ (8002c50 <__libc_init_array+0x40>)
 8002c28:	4c0a      	ldr	r4, [pc, #40]	@ (8002c54 <__libc_init_array+0x44>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	08002c94 	.word	0x08002c94
 8002c4c:	08002c94 	.word	0x08002c94
 8002c50:	08002c94 	.word	0x08002c94
 8002c54:	08002c98 	.word	0x08002c98

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
